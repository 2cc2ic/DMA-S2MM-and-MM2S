#include "sys_intr.h"
#include "I2C_8bit.h"
#include "xgpio.h"

#define IMAGE_WIDTH     640
#define IMAGE_HEIGHT	480
#define BYTES_PER_PIXEL	4


#define MEM_BASE_ADDR		0x10000000


#define BUFFER0_BASE		(MEM_BASE_ADDR )
#define BUFFER1_BASE		(MEM_BASE_ADDR +     IMAGE_WIDTH * IMAGE_HEIGHT * BYTES_PER_PIXEL)
#define BUFFER2_BASE		(MEM_BASE_ADDR + 2 * IMAGE_WIDTH * IMAGE_HEIGHT * BYTES_PER_PIXEL)

volatile int TxDone;
volatile int RxDone;
volatile int Error;

volatile u8 tx_buffer_index;
volatile u8 rx_buffer_index;

u32 *BufferPtr[3];

static XScuGic Intc; //GIC

static XGpio Gpio;

#define AXI_GPIO_DEV_ID	        XPAR_AXI_GPIO_0_DEVICE_ID


#define XGpio_axi_WriteReg(BaseAddr, RegOffset, Data)	\
		Xil_Out32((BaseAddr) + (u32)(RegOffset), (u32)(Data))
#define XPAR_GPIO_LITE_ML_0 XPAR_USER_DMA_0_S_AXI_LITE_BASEADDR

#define GPIO_LITE_ML_REG0 0
#define GPIO_LITE_ML_REG1 4
#define GPIO_LITE_ML_REG2 8
#define GPIO_LITE_ML_REG3 12


/*
 		XGpio_axi_WriteReg(XPAR_GPIO_LITE_ML_0,8,DDR_BASEARDDR);
		XGpio_axi_WriteReg(XPAR_GPIO_LITE_ML_0,12,0xFF00004F);

		XGpio_axi_WriteReg(XPAR_GPIO_LITE_ML_0,0,DDR_BASEARDDR+6000);
		XGpio_axi_WriteReg(XPAR_GPIO_LITE_ML_0,4,0xFF00004F);
 */

int init_intr_sys(void)
{
//	DMA_Intr_Init(&AxiDma,0);//initial interrupt system
	Init_Intr_System(&Intc); // initial DMA interrupt system
	Setup_Intr_Exception(&Intc);
//	DMA_Setup_Intr_System(&Intc,&AxiDma,TX_INTR_ID,RX_INTR_ID);//setup dma interrpt system
//	DMA_Intr_Enable(&Intc,&AxiDma);
}


int main(void)
{

	BufferPtr[0] = (u32 *)BUFFER0_BASE;
	BufferPtr[1] = (u32 *)BUFFER1_BASE;
	BufferPtr[2] = (u32 *)BUFFER2_BASE;

	tx_buffer_index = 0;
	rx_buffer_index = 0;
	TxDone = 0;
	RxDone = 0;
	Error = 0;

	XGpio_Initialize(&Gpio, AXI_GPIO_DEV_ID);
	XGpio_SetDataDirection(&Gpio, 1, 0);
	init_intr_sys();

	I2C_config_init();

	XGpio_DiscreteWrite(&Gpio, 1, 1);


	XGpio_axi_WriteReg(XPAR_GPIO_LITE_ML_0,8,BUFFER0_BASE);
	XGpio_axi_WriteReg(XPAR_GPIO_LITE_ML_0,12,0xFF00004F);

	XGpio_axi_WriteReg(XPAR_GPIO_LITE_ML_0,0,BUFFER0_BASE);
	XGpio_axi_WriteReg(XPAR_GPIO_LITE_ML_0,4,0xFF00004F);
//	Status = XAxiDma_SimpleTransfer(&AxiDma, (u32)BufferPtr[rx_buffer_index],
//				MAX_PKT_LEN, XAXIDMA_DEVICE_TO_DMA);
//
//	Status = XAxiDma_SimpleTransfer(&AxiDma, (u32)BufferPtr[tx_buffer_index],
//				MAX_PKT_LEN, XAXIDMA_DMA_TO_DEVICE);

	while (1) ;
		return XST_SUCCESS;
}


